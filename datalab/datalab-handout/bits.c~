/* 
 * CS:APP Data Lab 
 * 
 * Andrew Rutherford
 * SID 102165328
 * 
 * bits.c - Source file with your solutions to the Lab.
 *          This is the file you will hand in to your instructor.
 *
 * WARNING: Do not include the <stdio.h> header; it confuses the dlc
 * compiler. You can still use printf for debugging without including
 * <stdio.h>, although you might get a compiler warning. In general,
 * it's not good practice to ignore compiler warnings, but in this
 * case it's OK.  
 */

#if 0
/*
 * Instructions to Students:
 *
 * STEP 1: Read the following instructions carefully.
 */

You will provide your solution to the Data Lab by
editing the collection of functions in this source file.

INTEGER CODING RULES:
 
  Replace the "return" statement in each function with one
  or more lines of C code that implements the function. Your code 
  must conform to the following style:
 
  int Funct(arg1, arg2, ...) {
      /* brief description of how your implementation works */
      int var1 = Expr1;
      ...
      int varM = ExprM;

      varJ = ExprJ;
      ...
      varN = ExprN;
      return ExprR;
  }

  Each "Expr" is an expression using ONLY the following:
  1. Integer constants 0 through 255 (0xFF), inclusive. You are
      not allowed to use big constants such as 0xffffffff.
  2. Function arguments and local variables (no global variables).
  3. Unary integer operations ! ~
  4. Binary integer operations & ^ | + << >>
    
  Some of the problems restrict the set of allowed operators even further.
  Each "Expr" may consist of multiple operators. You are not restricted to
  one operator per line.

  You are expressly forbidden to:
  1. Use any control constructs such as if, do, while, for, switch, etc.
  2. Define or use any macros.
  3. Define any additional functions in this file.
  4. Call any functions.
  5. Use any other operations, such as &&, ||, -, or ?:
  6. Use any form of casting.
  7. Use any data type other than int.  This implies that you
     cannot use arrays, structs, or unions.

 
  You may assume that your machine:
  1. Uses 2s complement, 32-bit representations of integers.
  2. Performs right shifts arithmetically.
  3. Has unpredictable behavior when shifting an integer by more
     than the word size.

EXAMPLES OF ACCEPTABLE CODING STYLE:
  /*
   * pow2plus1 - returns 2^x + 1, where 0 <= x <= 31
   */
  int pow2plus1(int x) {
     /* exploit ability of shifts to compute powers of 2 */
     return (1 << x) + 1;
  }

  /*
   * pow2plus4 - returns 2^x + 4, where 0 <= x <= 31
   */
  int pow2plus4(int x) {
     /* exploit ability of shifts to compute powers of 2 */
     int result = (1 << x);
     result += 4;
     return result;
  }

FLOATING POINT CODING RULES

For the problems that require you to implent floating-point operations,
the coding rules are less strict.  You are allowed to use looping and
conditional control.  You are allowed to use both ints and unsigneds.
You can use arbitrary integer and unsigned constants.

You are expressly forbidden to:
  1. Define or use any macros.
  2. Define any additional functions in this file.
  3. Call any functions.
  4. Use any form of casting.
  5. Use any data type other than int or unsigned.  This means that you
     cannot use arrays, structs, or unions.
  6. Use any floating point data types, operations, or constants.


NOTES:
  1. Use the dlc (data lab checker) compiler (described in the handout) to 
     check the legality of your solutions.
  2. Each function has a maximum number of operators (! ~ & ^ | + << >>)
     that you are allowed to use for your implementation of the function. 
     The max operator count is checked by dlc. Note that '=' is not 
     counted; you may use as many of these as you want without penalty.
  3. Use the btest test harness to check your functions for correctness.
  4. Use the BDD checker to formally verify your functions
  5. The maximum number of ops for each function is given in the
     header comment for each function. If there are any inconsistencies 
     between the maximum ops in the writeup and in this file, consider
     this file the authoritative source.

/*
 * STEP 2: Modify the following functions according the coding rules.
 * 
 *   IMPORTANT. TO AVOID GRADING SURPRISES:
 *   1. Use the dlc compiler to check that your solutions conform
 *      to the coding rules.
 *   2. Use the BDD checker to formally verify that your solutions produce 
 *      the correct answers.
 */


#endif
/* Copyright (C) 1991-2014 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */
/* This header is separate from features.h so that the compiler can
   include it implicitly at the start of every compilation.  It must
   not itself include <features.h> or any other header that includes
   <features.h> because the implicit include comes before any feature
   test macros that may be defined in a source file before it first
   explicitly includes a system header.  GCC knows the name of this
   header in order to preinclude it.  */
/* glibc's intent is to support the IEC 559 math functionality, real
   and complex.  If the GCC (4.9 and later) predefined macros
   specifying compiler intent are available, use them to determine
   whether the overall intent is to support these features; otherwise,
   presume an older compiler has intent to support these features and
   define these macros by default.  */
/* wchar_t uses ISO/IEC 10646 (2nd ed., published 2011-03-15) /
   Unicode 6.0.  */
/* We do not support C11 <threads.h>.  */
/* 
 * bitOr - x|y using only ~ and & 
 *   Example: bitOr(6, 5) = 7
 *   Legal ops: ~ &
 *   Max ops: 8
 *   Rating: 1
 */
int bitOr(int x, int y) {
	//x = 0110	~x = 1001	
	//y = 0101	~y = 1010
	//1001 & 1010 = 1000
	//~(1000) = 0111
  return ~(~x & ~y);
}
/* 
 * evenBits - return word with all even-numbered bits set to 1
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 8
 *   Rating: 1
 */
int evenBits(void) {
	//5 in Binary is 0101 (Even bits are true only)
	//Want to return the word 0x55555555
	int p = 0x55;

	//Extend 0x55 to 0x55555555
	p = p|p<<8|p<<16|p<<24;

    return p;
}
/* 
 * minusOne - return a value of -1 
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 2
 *   Rating: 1
 */
int minusOne(void) {
	//~0 = FFFFFFFF which is equal to -1
  return ~0;
}
/* 
 * allEvenBits - return 1 if all even-numbered bits in word set to 1
 *   Examples allEvenBits(0xFFFFFFFE) = 0, allEvenBits(0x55555555) = 1
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 12
 *   Rating: 2
 */
int allEvenBits(int x) {
	//Convert from 0x55 to 0x55555555
	//int p = (0x55 << 8) + 0x55;
	//p = (p << 16) + p;
	int p = 0x55;
	p = p | p<<8 | p<<16 | p<<24;

	//If x = 0x8000 and p = 0x5555
	//x & p = 0x0....
	//0x0... ^ 0x5... = 0x5...
	//!(0x5...) converts the address into a boolean statement of 1 or 0
  return !((x & p) ^ p);
	
}
/* 
 * anyOddBit - return 1 if any odd-numbered bit in word set to 1
 *   Examples anyOddBit(0x5) = 0, anyOddBit(0x7) = 1
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 12
 *   Rating: 2
 */
int anyOddBit(int x) {
	//If x = 0x8;
	//x|x>>8|x>>16|x>>24 = 0xFFFFFF80
	//0xFFFFFF80 & 0x000000AA = 0x00000080
	//!(0x80) = 0
	//!(!(0x80)) = 1
    return !!((x|(x>>8)|(x>>16)|(x>>24))&0xaa);
}
/* 
 * byteSwap - swaps the nth byte and the mth byte
 *  Examples: byteSwap(0x12345678, 1, 3) = 0x56341278
 *            byteSwap(0xDEADBEEF, 0, 2) = 0xDEEFBEAD
 *  You may assume that 0 <= n <= 3, 0 <= m <= 3
 *  Legal ops: ! ~ & ^ | + << >>
 *  Max ops: 25
 *  Rating: 2
 */
int byteSwap(int x, int n, int m) {
	
	//Mask
	int a = 0xFF;

	//Shift over n places + 3 bits (leading position in byte)
	int nShift = n << 3;

	//Shift over m places + 3 bits (leading position in byte)	
	int mShift = m << 3;	

	//Shift 0xFF to desired spot and overlay with original value
	
	int nByte = (a << nShift) & x;

	//Shift 0xFF to desired spot and overlay with original value	
	int mByte = (a << mShift) & x;	

	//Both is both values put together
	int both = (a << nShift) | (a << mShift);	
	
	nByte = (nByte >> nShift) & a;	
	mByte = (mByte >> mShift) & a;

	//nByte is placed in new position
	nByte = nByte << mShift;

	//mByte is placed into swapped position	
	mByte = mByte << nShift;	

	//Overlay all values of both that are zeros with original address of x
	both = ~both & x;		
	
	//Return both, mByte, and nByte all put together	
    return both | mByte | nByte;	
}
/* 
 * addOK - Determine if can compute x+y without overflow
 *   Example: addOK(0x80000000,0x80000000) = 0,
 *            addOK(0x80000000,0x70000000) = 1, 
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 20
 *   Rating: 3
 */
int addOK(int x, int y) {
	//To overflow, the sign of x and y are the same
	//but the sign of x + y is different
	int x_sign = x >> 31;
	int y_sign = y >> 31;
	int sum = x + y;
	int sum_sign = sum >> 31;
	
	//Return OK if the sign of the sum is zero while the sign of x and y are 1
	//or if the sign of the sum is 1 when the sign of x and y are zero
  return !!((~sum_sign | x_sign | y_sign) & (sum_sign | ~x_sign | ~y_sign));
}
/* 
 * conditional - same as x ? y : z 
 *   Example: conditional(2,4,5) = 4
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 16
 *   Rating: 3
 */
int conditional(int x, int y, int z) {
	int a = !x;		//Convert x to a boolean
				
	int b = ~a + 1;		//b is the inverse of x
				//Invert the bits to all zeros or all ones
				//If x is true, b is false;
				//If x is false, b is true;
	int c = ~b;		//c is the inverse inverse of x
				//if x is true, c is true	
				//if x is false, c is false
	//Return true if z and inverse of x are true AND y and x are true
  return (z & b) + (y & c);
}
/* 
 * isAsciiDigit - return 1 if 0x30 <= x <= 0x39 (ASCII codes for characters '0' to '9')
 *   Example: isAsciiDigit(0x35) = 1.
 *            isAsciiDigit(0x3a) = 0.
 *            isAsciiDigit(0x05) = 0.
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 15
 *   Rating: 3
 */
int isAsciiDigit(int x) {
	//If y=-1, then 0x30<=x is false
	//If y=0, then 0x30<=x is true
	int y = (x + (~0x2F)) >> 31;

	//If z=-1, then x<=0x39 is false
	//If z=0, then x<=0x39 is true
	int z = (0x3a + ~x) >> 31;  

return !(y|z);
}
/* 
 * replaceByte(x,n,c) - Replace byte n in x with c
 *   Bytes numbered from 0 (LSB) to 3 (MSB)
 *   Examples: replaceByte(0x12345678,1,0xab) = 0x1234ab78
 *   You can assume 0 <= n <= 3 and 0 <= c <= 255
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 10
 *   Rating: 3
 */
int replaceByte(int x, int n, int c) {
	int t = 0xff;		
	int shift_n = n << 3;		//0xff shifted over to right position
	int new_byte = (t << shift_n);	//Align ff to same position as values of x
	int z = ~new_byte & x;		//0x__FFFFFF & 0x12345678 = 0x00345678
	int k = c << shift_n;		//0xAB000000
	
  return z | k;				//0xAB000000 | 0x00345678 = 0xAB345678
}
/* reverseBits - return the minimum number of bits required to represent x in
 *             two's complement
 *  Examples: reverseBits(0x11111111) = 0x88888888
 *            reverseBits(0xdeadbeef) = 0xf77db57b
 *            reverseBits(0x88888888) = 0x11111111
 *            reverseBits(0)  = 0
 *            reverseBits(-1) = -1
 *            reverseBits(0x9) = 0x90000000
 *  Legal ops: ! ~ & ^ | + << >> and unsigned int type
 *  Max ops: 90
 *  Rating: 4
 */
int reverseBits(int x) {
	/* This was my first attempt.  Does not work due to what appears to be an issue with arithmetic shifting of variables.
	int a1 = 0xaa;
	int a2 = 0x55;
	int b1 = 0xcc;
	int b2 = 0x33;
	int c1 = 0xf0;
	int c2 = 0x0f;
	int d1 = 0xff;
	int d2 = 0x00;
	int d3 = 0xff;
	int e1 = 0xff;
	int e2 = 0xff;
	a1 = a1 | a1<<8 | a1<<16 | a1<<24; 
	a2 = a2 | a2<<8 | a2<<16 | a2<<24;
	b1 = b1 | b1<<8 | b1<<16 | b1<<24;	
	b2 = b2 | b2<<8 | b2<<16 | b2<<24;
	c1 = c1 | c1<<8 | c1<<16 | c1<<24;	
	c2 = c2 | c2<<8 | c2<<16 | c2<<24;
	d1 = d1 << 24 | d1 << 8;
	d2 = d2<<24 | d3<<16 | d2<<8 | d3;
	e1 = e1<<24 | e1<<16;
	e2 = e2<<8 | e2;
	

	x = ((x & a1) >> 1) | ((x & a2) << 1);
	x = ((x & b1) >> 2) | ((x & b2) << 2);
	x = ((x & c1) >> 4) | ((x & c2) << 4);
	x = ((x & d1) >> 8) | ((x & d2) << 8);
	x = ((x & e1) >> 16) | ((x & e2) << 16);*/
/*
x = ((x & 0xaaaaaaaa) >> 1) | ((x & 0x55555555) << 1);
x = ((x & 0xcccccccc) >> 2) | ((x & 0x33333333) << 2);
x = ((x & 0xf0f0f0f0) >> 4) | ((x & 0x0f0f0f0f) << 4);
x = ((x & 0xff00ff00) >> 8) | ((x & 0x00ff00ff) << 8);
x = ((x & 0xffff0000) >> 16) | ((x & 0x0000ffff) << 16);
*/

	int as = 0xAA;
	int evens = (as<<8)|(as<<16)|(as<<24)|as;
	int fives = 0x55;
	int odds = (fives<<8)|(fives<<16)|(fives<<24)|fives;
	int cs = 0xCC;
	int stringc = (cs<<8)|(cs<<16)|(cs<<24)|cs;
	int threes = 0x33;
	int string3s = (threes<<8)|(threes<<16)|(threes<<24)|threes;
	int nibble = 0xF0;
	int nibbles = (nibble<<8)|(nibble<<16)|(nibble<<24)|nibble;
	int notnibbles = ~nibbles;
	int byte = 0xFF;
	int bytes = (byte<<8)|(byte<<24);
	int notbytes = ~bytes<<8;
	int twobytes = (byte<<8)|(byte);
	int lasttwobytes = twobytes<<16;
	int lastbyte = 0xf;
	
	x = (((x&evens)>>1)&~(x&evens))|((x&odds)<<1);
	x = (((x&stringc)>>2)&~(lastbyte<<30))|((x & string3s)<<2);
	x = (((x&nibbles)>>4)&~(lastbyte<<28))|((x & notnibbles)<<4);
	x = (((x&bytes)>>8)&~(byte<<24))|((x&~notbytes)<<8);
	x = (((x&lasttwobytes)>>16)&~(lasttwobytes))|((x&twobytes)<<16);

  return x;
}
/*
 * satAdd - adds two numbers but when positive overflow occurs, returns
 *          maximum possible value, and when negative overflow occurs,
 *          it returns minimum positive value.
 *   Examples: satAdd(0x40000000,0x40000000) = 0x7fffffff
 *             satAdd(0x80000000,0xffffffff) = 0x80000000
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 30
 *   Rating: 4
 */
int satAdd(int x, int y) {
  	int sum = x + y;
	int is_overflow = ((sum ^ x ) & (sum ^ y)) >> 31;
	return (sum >>(is_overflow & 31 )) + (is_overflow << 31);
}
/*
 * Extra credit
 */
/* 
 * float_abs - Return bit-level equivalent of absolute value of f for
 *   floating point argument f.
 *   Both the argument and result are passed as unsigned int's, but
 *   they are to be interpreted as the bit-level representations of
 *   single-precision floating point values.
 *   When argument is NaN, return argument..
 *   Legal ops: Any integer/unsigned operations incl. ||, &&. also if, while
 *   Max ops: 10
 *   Rating: 2
 */
unsigned float_abs(unsigned uf) {
  //Not my code, for testing purposes only.
	unsigned mask = 0x7FFFFFFF;		
	unsigned minNaN = 0x7F800001;
	unsigned res = uf & mask;		
	
	if (res >= minNaN)
  	{
		return uf;
  	}
	else
  	{
		return res;
  	}
}
/* 
 * float_f2i - Return bit-level equivalent of expression (int) f
 *   for floating point argument f.
 *   Argument is passed as unsigned int, but
 *   it is to be interpreted as the bit-level representation of a
 *   single-precision floating point value.
 *   Anything out of range (including NaN and infinity) should return
 *   0x80000000u.
 *   Legal ops: Any integer/unsigned operations incl. ||, &&. also if, while
 *   Max ops: 30
 *   Rating: 4
 */
int float_f2i(unsigned uf) {
  return 2;
}
/* 
 * float_half - Return bit-level equivalent of expression 0.5*f for
 *   floating point argument f.
 *   Both the argument and result are passed as unsigned int's, but
 *   they are to be interpreted as the bit-level representation of
 *   single-precision floating point values.
 *   When argument is NaN, return argument
 *   Legal ops: Any integer/unsigned operations incl. ||, &&. also if, while
 *   Max ops: 30
 *   Rating: 4
 */
unsigned float_half(unsigned uf) {
  return 2;
}
